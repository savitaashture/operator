# Copyright 2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: batch/v1
kind: Job
metadata:
  generateName: tekton-config-clean-up-
  namespace: openshift-operators
  annotations:
    operator.tekton.dev/preserve-namespace: "true"
  labels:
    app.kubernetes.io/name: tekton-config-clean-up
    app.kubernetes.io/component: tekton-config
    app.kubernetes.io/part-of: tekton-config
spec:
  ttlSecondsAfterFinished: 600
  backoffLimit: 10
  template:
    metadata:
      labels:
        app: "tekton-config"
    spec:
      serviceAccountName: openshift-pipelines-operator
      restartPolicy: OnFailure
      containers:
        - name: delete-config-crd
          image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          command:
            - "bash"
          args:
            - "-c"
            - |
              #!/usr/bin/env bash

              OWNER_KIND="TektonAddon"
              OWNER_APIVERSION="operator.tekton.dev/v1alpha1"
              OWNER_NAME="addon"
              OWNER_UID=""

              function findNewOwnerUID {
                  OWNER_UID=$(kubectl get ${OWNER_KIND} ${OWNER_NAME} -o=jsonpath='{.metadata.uid}')
                  echo OWNER_APIVERSION=$OWNER_APIVERSION
                  echo OWNER_KIND=$OWNER_KIND
                  echo OWNER_NAME=$OWNER_NAME
                  echo OWNER_UID=$OWNER_UID
              }

              function checkOwner() {
                  CT=${1}
                  CONFIGOWNER=$(kubectl get clustertasks ${CT} -o=jsonpath='{.metadata.ownerReferences[?(@.kind=="Config")].name}')
                  if [[ -n $CONFIGOWNER ]]; then
                    return 0
                  fi
                  return 1
              }

              function updateOwnerReference() {
                  CT=${1}
                  kubectl patch clustertask ${CT} --type='json' -p='[{"op": "remove", "path": "/metadata/ownerReferences"}]'

                  kubectl patch clustertask ${CT} --type='json' -p=\[\{\"op\":\ \"add\",\ \"path\":\ \"/metadata/ownerReferences\",\ \"value\":\ \[\{\"name\":\"${OWNER_NAME}\",\ \"kind\":\"${OWNER_KIND}\",\ \"apiVersion\":\ \"${OWNER_APIVERSION}\",\ \"blockOwnerDeletion\":\ \true,\ \"uid\":\ \ \"${OWNER_UID}\"\}\]\ \}\]
              }

              findNewOwnerUID

              CLUSTERTASKS=$(kubectl get clustertasks -o=jsonpath='{.items[*].metadata.name}')

              for CTASK in ${CLUSTERTASKS}; do
                  if checkOwner ${CTASK}; then
                    echo changing owner of ${CTASK}
                    updateOwnerReference ${CTASK}
                  fi
              done

              echo 'ownerReference reset'

              # remove the config.operator.tekton.dev crd as the operator reconcilers will not remove it.
              # this crd was added to the cluster by OLM with the past operator release(s)
              # however, OLM will not remove this crd, so this job will handle it
              # this should remove its instance as well (name: cluster, kind: Config, apiVersion: config.operator.tekton.dev/v1alpha1)
              oc delete crd config.operator.tekton.dev --ignore-not-found
              echo 'obsolete config.operator.tekton.dev instance deleted'
---
